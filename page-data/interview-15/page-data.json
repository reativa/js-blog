{"componentChunkName":"component---src-templates-blog-post-js","path":"/interview-15/","result":{"data":{"site":{"siteMetadata":{"title":"JS para impacientes"}},"markdownRemark":{"id":"a5db2d4a-ec2c-5bd1-b33e-d490b1f46e16","excerpt":"https://www.instagram.com/tv/B9zefp9HBVa/ Closures é um tópico controverso. O que eu gostaria de ouvir como entrevistador seria algo como: Closures significa…","html":"<p><a href=\"https://www.instagram.com/tv/B9zefp9HBVa/\">https://www.instagram.com/tv/B9zefp9HBVa/</a></p>\n<p><strong>Closures</strong> é um tópico controverso. O que eu gostaria de ouvir como entrevistador seria algo como:</p>\n<blockquote>\n<p>Closures significa que uma função interna sempre tem acesso as variáveis e aos parâmetros de sua função externa, mesmo após o retorno da função externa.</p>\n</blockquote>\n<p>Cê ta ligado que dá pra criar função dentro de função né?</p>\n<p>exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">OuterFunction</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> outerVariable <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">InnerFunction</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>outerVariable<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">InnerFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>No exemplo acima, InnerFunction() pode acessar a variável <code class=\"language-text\">outerVariable</code> mesmo ela estando declarada no escopo de cima.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">OuterFunction</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> outerVariable <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n  <span class=\"token keyword\">var</span> parameters <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">InnerFunction</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[OUTER CLOSURE] OuterVariable continua viva no meu coração: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>outerVariable<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[OUTER CLOSURE] Parâmetros que mandaram para o Outer: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>parameters<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[INNER] Meus parâmetros: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> InnerFunction\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> innerFunc <span class=\"token operator\">=</span> <span class=\"token function\">OuterFunction</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"vral\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">innerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Ele chama a <code class=\"language-text\">OuterFunction</code> mas a única referência que você tem é a da <code class=\"language-text\">InnerFunction</code>, mas MESMO ASSIM você continua tendo acesso as variáveis que foram passadas pelo parâmetro para a <code class=\"language-text\">OuterFunction</code> bem como o que foi declarado nela que no caso é a <code class=\"language-text\">outerVariable</code></p>\n<p>Isso permite que ninguém externamente consiga mudar essas variáveis de dentro do escopo do OuterFunction, olha só:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">var</span> counter <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> privateCounter <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">changeBy</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    privateCounter <span class=\"token operator\">+=</span> val\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">increment</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">changeBy</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function-variable function\">decrement</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">changeBy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function-variable function\">value</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> privateCounter\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> original <span class=\"token operator\">=</span> counter<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Contador Original: \"</span><span class=\"token punctuation\">,</span> original<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// altera o valor</span>\n\ncounter<span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncounter<span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Contador Original: \"</span><span class=\"token punctuation\">,</span> original<span class=\"token punctuation\">)</span> <span class=\"token comment\">// continua a mesma bosta</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\ncounter<span class=\"token punctuation\">.</span><span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Contador Original: \"</span><span class=\"token punctuation\">,</span> original<span class=\"token punctuation\">)</span> <span class=\"token comment\">// continua a mesma bosta</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>Explicação do <a href=\"http://www.crockford.com/javascript/private.html\">Douglinhas</a> (um dos principais devs de JS do mundo).</li>\n<li>Tutorial gostosinho do <a href=\"https://www.tutorialsteacher.com/javascript/closure-in-javascript\">TutorialsTeacher</a>.</li>\n</ul>\n<p>Baseado no excelente artigo: <a href=\"https://dev.to/macmacky/70-javascript-interview-questions-5gfi\">70 Interview Questions</a></p>","frontmatter":{"title":"15: O que são closures?","date":"February 15, 2020","description":"#PerguntasDeEntrevistas 15"}}},"pageContext":{"slug":"/interview-15/","previous":{"fields":{"slug":"/interview-14/"},"frontmatter":{"title":"14: O que é escopo em Javascript?"}},"next":{"fields":{"slug":"/interview-16/"},"frontmatter":{"title":"16: O que \"use strict\" faz?"}}}},"staticQueryHashes":["1061827086","63159454"]}