{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript-como-fazer-CSVToJSON/","result":{"data":{"site":{"siteMetadata":{"title":"JS para impacientes"}},"markdownRemark":{"id":"5ec66820-3b65-5481-8f11-81b9acfd6acc","excerpt":"Converts a comma-separated values (CSV) string to a 2D array of objects.\nThe first row of the string is used as the title row. Use  and  and  to separate the…","html":"<p>Converts a comma-separated values (CSV) string to a 2D array of objects.\nThe first row of the string is used as the title row.</p>\n<p>Use <code class=\"language-text\">Array.prototype.slice()</code> and <code class=\"language-text\">Array.prototype.indexOf(&#39;\\n&#39;)</code> and <code class=\"language-text\">String.prototype.split(delimiter)</code> to separate the first row (title row) into values.\nUse <code class=\"language-text\">String.prototype.split(&#39;\\n&#39;)</code> to create a string for each row, then <code class=\"language-text\">Array.prototype.map()</code> and <code class=\"language-text\">String.prototype.split(delimiter)</code> to separate the values in each row.\nUse <code class=\"language-text\">Array.prototype.reduce()</code> to create an object for each row’s values, with the keys parsed from the title row.\nOmit the second argument, <code class=\"language-text\">delimiter</code>, to use a default delimiter of <code class=\"language-text\">,</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> CSVToJSON <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> delimiter <span class=\"token operator\">=</span> <span class=\"token string\">','</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> titles <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>delimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> data\n    <span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> values <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>delimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> titles<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>title<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> values<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token function\">CSVToJSON</span><span class=\"token punctuation\">(</span><span class=\"token string\">'col1,col2\\na,b\\nc,d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [{'col1': 'a', 'col2': 'b'}, {'col1': 'c', 'col2': 'd'}];</span>\n<span class=\"token function\">CSVToJSON</span><span class=\"token punctuation\">(</span><span class=\"token string\">'col1;col2\\na;b\\nc;d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">';'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [{'col1': 'a', 'col2': 'b'}, {'col1': 'c', 'col2': 'd'}];</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p><a href=\"http://github.com/30-seconds/\">Acesse a Referência original</a></p>","frontmatter":{"title":"como usar o CSVToJSON no javascript es6","date":"January 04, 2020","description":""}}},"pageContext":{"slug":"/javascript-como-fazer-CSVToJSON/","previous":{"fields":{"slug":"/javascript-como-fazer-JSONToFile/"},"frontmatter":{"title":"como usar o JSONToFile no javascript es6"}},"next":{"fields":{"slug":"/javascript-como-fazer-CSVToArray/"},"frontmatter":{"title":"como usar o CSVToArray no javascript es6"}}}},"staticQueryHashes":["1061827086","63159454"]}