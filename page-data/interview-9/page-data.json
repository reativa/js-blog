{"componentChunkName":"component---src-templates-blog-post-js","path":"/interview-9/","result":{"data":{"site":{"siteMetadata":{"title":"JS para impacientes"}},"markdownRemark":{"id":"94e0f5c0-b9f8-5b72-86db-e6100b031ec0","excerpt":"https://www.instagram.com/tv/B9j_oeXF244/ Caso queira executar os exemplos, use o codepen.io A diferença entre  (abstrata) e  (estrita) é que 0  compara por…","html":"<p><a href=\"https://www.instagram.com/tv/B9j_oeXF244/\">https://www.instagram.com/tv/B9j_oeXF244/</a></p>\n<p>Caso queira executar os exemplos, use o <a href=\"http://codepen.io\">codepen.io</a></p>\n<p>A diferença entre <code class=\"language-text\">==</code> <strong>(abstrata)</strong> e <code class=\"language-text\">===</code> <strong>(estrita)</strong> é que 0 <code class=\"language-text\">==</code> compara por <strong>valor</strong> APÓS a <em>coerção</em> e <code class=\"language-text\">===</code> por <strong>valor</strong> e <strong>tipo</strong> sem <em>coerção</em>.</p>\n<p>Vamos nos aprofundar no <code class=\"language-text\">==</code>. Mas, primeiro vamos falar sobre <em>coerção</em> .</p>\n<p>Javascript não tem tipagem forte, então ele sempre vai tentar fazer a conversão das variáveis pra fazer determinadas operações, isso é chamado de <em>coerção</em> que é o processo de converter um valor para outro tipo.</p>\n<p>tá ligado quando você usa o <code class=\"language-text\">if(algumObjeto)</code>? por baixo dos panos o javascript converte esse maluco pra boolean e consegue dizer se ele existe ou não. </p>\n<p>Voltando ao <code class=\"language-text\">==</code> ele faz essa <em>coerção implícita</em> que acabei de explicar, e para fazer isso ele segue um monte de regra maluca que depende de várias situações, que até o <a href=\"https://en.wikipedia.org/wiki/Brendan_Eich\">Brendan Eich</a> tem dúvidas sobre isso então não se preocupe se você não entender de primeira.</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d1/Brendan_Eich_Mozilla_Foundation_official_photo.jpg/220px-Brendan_Eich_Mozilla_Foundation_official_photo.jpg\"></p>\n<p>SHOW ME THE CODE:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'true == \\'true\\': '</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">==</span> <span class=\"token string\">'true'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// aqui vai dar true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'true == \\'1\\': '</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">==</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// aqui vai dar true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'true == true): '</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// aqui vai dar true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[===] true === \\'true\\': '</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">===</span> <span class=\"token string\">'true'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// aqui vai dar false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[===]true === \\'1\\': '</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">===</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// aqui vai dar false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[===]true === true): '</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// aqui vai dar true</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Suponha que tenhamos que comparar <code class=\"language-text\">x == y</code>.</p>\n<ol>\n<li>Se <code class=\"language-text\">x</code> e <code class=\"language-text\">y</code> tiver o mesmo tipo. Em seguida, ele os compara com o operador <code class=\"language-text\">===</code>.</li>\n<li>Se <code class=\"language-text\">x</code> é <code class=\"language-text\">null</code> e <code class=\"language-text\">y</code> é <code class=\"language-text\">undefined</code>então retorne <code class=\"language-text\">true</code>.</li>\n<li>Se <code class=\"language-text\">x</code> é <code class=\"language-text\">undefined</code> e <code class=\"language-text\">y</code> é <code class=\"language-text\">null</code> então retorne <code class=\"language-text\">true</code>.</li>\n<li>Se <code class=\"language-text\">x</code> é do tipo <code class=\"language-text\">number</code> e <code class=\"language-text\">y</code> é do tipo <code class=\"language-text\">string</code> retorne <code class=\"language-text\">x == toNumber(y)</code>.</li>\n<li>Se <code class=\"language-text\">x</code> é do tipo <code class=\"language-text\">string</code>e <code class=\"language-text\">y</code> é do tipo <code class=\"language-text\">number</code> retorne <code class=\"language-text\">toNumber(x) == y</code>.</li>\n<li>Se <code class=\"language-text\">x</code> for do tipo <code class=\"language-text\">boolean</code> retorne <code class=\"language-text\">toNumber(x) == y</code>.</li>\n<li>Se <code class=\"language-text\">y</code> for do tipo <code class=\"language-text\">boolean</code> retorne <code class=\"language-text\">x == toNumber(y)</code>.</li>\n<li>Se <code class=\"language-text\">x</code> é um dos tipos (<code class=\"language-text\">string</code>, <code class=\"language-text\">symbol</code> ou <code class=\"language-text\">number</code>) e <code class=\"language-text\">y</code>é o tipo <code class=\"language-text\">object</code> então retorne <code class=\"language-text\">x == toPrimitive(y)</code>.</li>\n<li>Se <code class=\"language-text\">x</code> for um <code class=\"language-text\">object</code> e <code class=\"language-text\">x</code> for um <code class=\"language-text\">string</code>, <code class=\"language-text\">symbol</code> Então retorne <code class=\"language-text\">toPrimitive(x) == y</code>.</li>\n<li>Senão, retorne <code class=\"language-text\">false</code>.</li>\n</ol>\n<p><strong>Nota:</strong> <code class=\"language-text\">toPrimitive</code> usa primeiro o <code class=\"language-text\">valueOf</code> e depois o <code class=\"language-text\">toString</code> nos objetos para obter o valor primitivo desse objeto.</p>\n<p>Vamos dar exemplos.</p>\n<table>\n<thead>\n<tr>\n<th><code class=\"language-text\">x</code></th>\n<th><code class=\"language-text\">y</code></th>\n<th><code class=\"language-text\">x == y</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">5</code></td>\n<td><code class=\"language-text\">5</code></td>\n<td><code class=\"language-text\">true</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">1</code></td>\n<td><code class=\"language-text\">&#39;1&#39;</code></td>\n<td><code class=\"language-text\">true</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">null</code></td>\n<td><code class=\"language-text\">undefined</code></td>\n<td><code class=\"language-text\">true</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">0</code></td>\n<td><code class=\"language-text\">false</code></td>\n<td><code class=\"language-text\">true</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">&#39;1,2&#39;</code></td>\n<td><code class=\"language-text\">[1,2]</code></td>\n<td><code class=\"language-text\">true</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">&#39;[object Object]&#39;</code></td>\n<td><code class=\"language-text\">{}</code></td>\n<td><code class=\"language-text\">true</code></td>\n</tr>\n</tbody>\n</table>\n<p>Todos esses exemplos retornam <code class=\"language-text\">true</code>.</p>\n<p>O <strong>primeiro exemplo</strong> vai para a <strong>condição um</strong> porque <code class=\"language-text\">x</code>e <code class=\"language-text\">y</code> tem o mesmo tipo e valor.</p>\n<p>O <strong>segundo exemplo</strong> vai para a <strong>condição quatro</strong> <code class=\"language-text\">y</code> é convertida em <code class=\"language-text\">number</code> antes de comparar.</p>\n<p>O <strong>terceiro exemplo</strong> vai para a <strong>condição dois</strong>.</p>\n<p>O <strong>quarto exemplo</strong> vai para a <strong>condição sete</strong> porque <code class=\"language-text\">y</code> é <code class=\"language-text\">boolean</code>.</p>\n<p>O <strong>quinto exemplo</strong> vai para a <strong>condição oito</strong> . O array é convertido em <code class=\"language-text\">string</code> usando o <code class=\"language-text\">toString()</code>que retorna <code class=\"language-text\">1,2</code>.</p>\n<p>O <strong>último exemplo</strong> vai para a <strong>condição dez</strong> . O objeto é convertido em um <code class=\"language-text\">string</code> usando o <code class=\"language-text\">toString()</code> que retorna <code class=\"language-text\">[object Object]</code>.</p>\n<table>\n<thead>\n<tr>\n<th><code class=\"language-text\">x</code></th>\n<th><code class=\"language-text\">y</code></th>\n<th><code class=\"language-text\">x === y</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">5</code></td>\n<td><code class=\"language-text\">5</code></td>\n<td><code class=\"language-text\">true</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">1</code></td>\n<td><code class=\"language-text\">&#39;1&#39;</code></td>\n<td><code class=\"language-text\">false</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">null</code></td>\n<td><code class=\"language-text\">undefined</code></td>\n<td><code class=\"language-text\">false</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">0</code></td>\n<td><code class=\"language-text\">false</code></td>\n<td><code class=\"language-text\">false</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">&#39;1,2&#39;</code></td>\n<td><code class=\"language-text\">[1,2]</code></td>\n<td><code class=\"language-text\">false</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">&#39;[object Object]&#39;</code></td>\n<td><code class=\"language-text\">{}</code></td>\n<td><code class=\"language-text\">false</code></td>\n</tr>\n</tbody>\n</table>\n<p>Se usarmos o operador <code class=\"language-text\">===</code>, todas as comparações, com exceção do primeiro exemplo, retornarão <code class=\"language-text\">false</code>, porque não têm o mesmo tipo, enquanto o primeiro exemplo retornará <code class=\"language-text\">true</code> porque os dois têm o mesmo tipo e valor.</p>\n<p>Ainda não entendeu? Calma, nem quem fez o JS entende isso direito (brinks) mas aqui estão alguns artigos legais pra tentar ao menos entender o básico disto:</p>\n<ul>\n<li>Sempre olhe a <a href=\"https://www.ecma-international.org/ecma-262/6.0/index.html#sec-type-conversion\">documentação oficial</a>.</li>\n<li>Excelente artigo no <a href=\"https://medium.com/trainingcenter/explicando-a-coer%C3%A7%C3%A3o-de-tipos-em-javascript-d6c9203c4e5\">Medium</a>, falando a respeito.</li>\n<li>Consulte a <a href=\"https://dorey.github.io/JavaScript-Equality-Table/\">tabela de igualdade</a> do JS</li>\n<li>Exemplos de <a href=\"https://wtfjs.com/\">bizarrices</a> no Javascript.</li>\n<li>Outros <a href=\"https://github.com/denysdovhan/wtfjs#-is-equal-\">exemplos de bizarrice</a>.</li>\n<li>Artigo interessante do <a href=\"https://hackernoon.com/understanding-js-coercion-ff5684475bfc\">Hackernoon</a>.</li>\n</ul>\n<p>Baseado no excelente artigo: <a href=\"https://dev.to/macmacky/70-javascript-interview-questions-5gfi#14-whats-the-difference-between-and-\">70 Interview Questions</a></p>","frontmatter":{"title":"9: Qual a diferença entre == e ===?","date":"February 09, 2020","description":"#PerguntasDeEntrevistas 9"}}},"pageContext":{"slug":"/interview-9/","previous":{"fields":{"slug":"/interview-8/"},"frontmatter":{"title":"8: Diferenças de event.target e event.currentTarget?"}},"next":{"fields":{"slug":"/interview-10/"},"frontmatter":{"title":"10: Por que ao comparar dois objetos semelhantes ele retorna falso em JavaScript?"}}}},"staticQueryHashes":["1061827086","63159454"]}