{"componentChunkName":"component---src-templates-blog-post-js","path":"/interview-14/","result":{"data":{"site":{"siteMetadata":{"title":"JS para impacientes"}},"markdownRemark":{"id":"d6aacb9f-463a-513f-866d-f87e734cba97","excerpt":"https://www.instagram.com/tv/B9w3lg6nzt4/ Escopo em JavaScript é a área em que temos acesso válido a variáveis ​​ou funções.  JavaScript tem três tipos de…","html":"<p><a href=\"https://www.instagram.com/tv/B9w3lg6nzt4/\">https://www.instagram.com/tv/B9w3lg6nzt4/</a></p>\n<p><strong>Escopo</strong> em JavaScript é a <strong>área</strong> em que temos acesso válido a variáveis ​​ou funções. </p>\n<p>JavaScript tem três tipos de escopos: <strong>Escopo Global</strong> , <strong>Escopo da Função</strong> e <strong>Escopo do Bloco (ES6)</strong>.</p>\n<ul>\n<li><strong>Escopo Global</strong> - variáveis ​​ou funções declaradas no espaço de nomes global estão no escopo global e, portanto, estão acessíveis em qualquer lugar em nosso código.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token comment\">//global namespace</span>\n<span class=\"token keyword\">var</span> g <span class=\"token operator\">=</span> <span class=\"token string\">\"global\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">globalFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">innerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span> <span class=\"token comment\">// G é global, então é acessível aqui</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">innerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li><strong>Escopo da Função</strong> - variáveis, funções e parâmetros declarados em uma função são acessíveis dentro dessa função, mas não fora dela.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">myFavoriteFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello \"</span> <span class=\"token operator\">+</span> a\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> b\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">myFavoriteFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Throws a ReferenceError \"a\" is not defined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// does not continue here</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li><strong>Escopo do bloco</strong> - variáveis <strong>( <code class=\"language-text\">let</code>, <code class=\"language-text\">const</code>)</strong> declaradas em um bloco <code class=\"language-text\">{}</code>só podem ter acesso dentro dele.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">testBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">let</span> z <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n   <span class=\"token punctuation\">}</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token function\">testBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Throws a ReferenceError \"z\" is not defined</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>Escopo</strong> também é um conjunto de regras para encontrar variáveis. Se uma variável não existe no <strong>escopo atual</strong> ele sai olhando nos escopos acima no <strong>escopo externo</strong>, e se não existe mais uma vez, <strong>olha para cima</strong> novamente até atingir o <strong>escopo global</strong> se a variável existe ele usa, senão manda aquele errão brabo na tela e para de procurar. Isso é chamado de <strong>cadeia de escopo</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\">   <span class=\"token comment\">/* Scope Chain\n   Inside inner function perspective\n\n   inner's scope -> outer's scope -> global's scope\n  */</span>\n\n  <span class=\"token comment\">//Global Scope</span>\n  <span class=\"token keyword\">var</span> variable1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Comrades\"</span>\n  <span class=\"token keyword\">var</span> variable2 <span class=\"token operator\">=</span> <span class=\"token string\">\"Sayonara\"</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//outer's scope</span>\n    <span class=\"token keyword\">var</span> variable1 <span class=\"token operator\">=</span> <span class=\"token string\">\"World\"</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//inner's scope</span>\n      <span class=\"token keyword\">var</span> variable2 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>variable2 <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> variable1<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// logs Hello World</span>\n<span class=\"token comment\">// because (variable2 = \"Hello\") and (variable1 = \"World\") are the nearest</span>\n<span class=\"token comment\">// variables inside inner's scope.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dJFL2g1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/l81b3nmdonimex0qsgyr.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dJFL2g1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/l81b3nmdonimex0qsgyr.png\" alt=\"Escopo\"></a></p>\n<p>Baseado no excelente artigo: <a href=\"https://dev.to/macmacky/70-javascript-interview-questions-5gfi#14-whats-the-difference-between-and-\">70 Interview Questions</a></p>","frontmatter":{"title":"14: O que é escopo em Javascript?","date":"February 14, 2020","description":"#PerguntasDeEntrevistas 14"}}},"pageContext":{"slug":"/interview-14/","previous":{"fields":{"slug":"/interview-13/"},"frontmatter":{"title":"13: O que é javascript hoisting?"}},"next":{"fields":{"slug":"/interview-15/"},"frontmatter":{"title":"15: O que são closures?"}}}},"staticQueryHashes":["1061827086","63159454"]}