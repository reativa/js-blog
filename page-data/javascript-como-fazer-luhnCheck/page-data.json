{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript-como-fazer-luhnCheck/","result":{"data":{"site":{"siteMetadata":{"title":"JS para impacientes"}},"markdownRemark":{"id":"af9407ef-d132-5c9b-8e80-25c01b559a1c","excerpt":"Implementation of the Luhn Algorithm used to validate a variety of identification numbers, such as credit card numbers, IMEI numbers, National Provider…","html":"<p>Implementation of the <a href=\"https://en.wikipedia.org/wiki/Luhn_algorithm\">Luhn Algorithm</a> used to validate a variety of identification numbers, such as credit card numbers, IMEI numbers, National Provider Identifier numbers etc.</p>\n<p>Use <code class=\"language-text\">String.prototype.split(&#39;&#39;)</code>, <code class=\"language-text\">Array.prototype.reverse()</code> and <code class=\"language-text\">Array.prototype.map()</code> in combination with <code class=\"language-text\">parseInt()</code> to obtain an array of digits.\nUse <code class=\"language-text\">Array.prototype.splice(0,1)</code> to obtain the last digit.\nUse <code class=\"language-text\">Array.prototype.reduce()</code> to implement the Luhn Algorithm.\nReturn <code class=\"language-text\">true</code> if <code class=\"language-text\">sum</code> is divisible by <code class=\"language-text\">10</code>, <code class=\"language-text\">false</code> otherwise.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">luhnCheck</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> lastDigit <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> acc <span class=\"token operator\">+</span> val <span class=\"token operator\">:</span> acc <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>val <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  sum <span class=\"token operator\">+=</span> lastDigit<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> sum <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token function\">luhnCheck</span><span class=\"token punctuation\">(</span><span class=\"token string\">'4485275742308327'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token function\">luhnCheck</span><span class=\"token punctuation\">(</span><span class=\"token number\">6011329933655299</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  false</span>\n<span class=\"token function\">luhnCheck</span><span class=\"token punctuation\">(</span><span class=\"token number\">123456789</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p><a href=\"http://github.com/30-seconds/\">Acesse a Referência original</a></p>","frontmatter":{"title":"como usar o luhnCheck no javascript es6","date":"January 04, 2020","description":""}}},"pageContext":{"slug":"/javascript-como-fazer-luhnCheck/","previous":{"fields":{"slug":"/javascript-como-fazer-lowercaseKeys/"},"frontmatter":{"title":"como usar o lowercaseKeys no javascript es6"}},"next":{"fields":{"slug":"/javascript-como-fazer-lcm/"},"frontmatter":{"title":"como usar o lcm no javascript es6"}}}},"staticQueryHashes":["1061827086","63159454"]}