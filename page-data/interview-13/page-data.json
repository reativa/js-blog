{"componentChunkName":"component---src-templates-blog-post-js","path":"/interview-13/","result":{"data":{"site":{"siteMetadata":{"title":"JS para impacientes"}},"markdownRemark":{"id":"f029f402-654e-53dd-bebc-3df630c10520","excerpt":"https://www.instagram.com/tv/B9uSymRDHIc/ Hoisting no Javascript é o termo usado para descrever a movimentação de variáveis e funções para o topo de seu escopo…","html":"<p><a href=\"https://www.instagram.com/tv/B9uSymRDHIc/\">https://www.instagram.com/tv/B9uSymRDHIc/</a></p>\n<p><strong>Hoisting</strong> no Javascript é o termo usado para descrever a movimentação de <em>variáveis</em> e <em>funções</em> para o topo de seu escopo <em>(global ou função),</em> em relação ao local de onde a definimos.</p>\n<p>Exemplo: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token function\">printName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">printName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Paulo Luan é bonitão pakarai'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Para entender <strong>Hoist</strong> , temos que entender o <em>contexto de execução</em>.</p>\n<p>O <strong>contexto de execução</strong> é o “ambiente de código” atualmente em execução. O <strong>contexto de execução</strong> possui duas fases de <em>compilação</em> e <em>execução</em>.</p>\n<p><strong>Compilação</strong> - nesta fase esse maluco pega as <code class=\"language-text\">vars</code> e <code class=\"language-text\">functions</code> para cima, para que possamos referenciá-los mais tarde e receber os valores.</p>\n<p><strong>Execução</strong> - nesta fase, atribui valores às variáveis <em>içadas</em> anteriormente e <em>executa</em> ou <em>invoca</em> funções <strong>(métodos em objetos)</strong> .</p>\n<p><strong>Nota:</strong> só vale se for <code class=\"language-text\">function</code> ou <code class=\"language-text\">var</code> RAÍZ, os nutella do ES6 NÃO são HOIÇADOS (let, const, arrow function e o restante).</p>\n<p>veja os exemplos:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// VAR BRABO DO RAÍZ DO RISCA FACA FUNCIONA</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// NUTELLA NÃO FUNCIONA</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Paulo Luan Bonitão\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'Olá '</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'!'</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Paulo Luan Bonitão\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">greet</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// NUTTELA </span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'Olá '</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'!'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//console.log(greet(\"Paulo Luan Bonitão\"))</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Baseado no excelente artigo: <a href=\"https://dev.to/macmacky/70-javascript-interview-questions-5gfi#14-whats-the-difference-between-and-\">70 Interview Questions</a></p>","frontmatter":{"title":"13: O que é javascript hoisting?","date":"February 13, 2020","description":"#PerguntasDeEntrevistas 13"}}},"pageContext":{"slug":"/interview-13/","previous":{"fields":{"slug":"/interview-12/"},"frontmatter":{"title":"12: Como executar várias expressões em uma linha?"}},"next":{"fields":{"slug":"/interview-14/"},"frontmatter":{"title":"14: O que é escopo em Javascript?"}}}},"staticQueryHashes":["1061827086","63159454"]}