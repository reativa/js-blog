{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript-como-fazer-pipeAsyncFunctions/","result":{"data":{"site":{"siteMetadata":{"title":"JS para impacientes"}},"markdownRemark":{"id":"08065785-4dfa-55a8-9a90-970cd617c677","excerpt":"Performs left-to-right function composition for asynchronous functions. Use  with the spread operator () to perform left-to-right function composition using…","html":"<p>Performs left-to-right function composition for asynchronous functions.</p>\n<p>Use <code class=\"language-text\">Array.prototype.reduce()</code> with the spread operator (<code class=\"language-text\">...</code>) to perform left-to-right function composition using <code class=\"language-text\">Promise.then()</code>.\nThe functions can return a combination of: simple values, <code class=\"language-text\">Promise</code>’s, or they can be defined as <code class=\"language-text\">async</code> ones returning through <code class=\"language-text\">await</code>.\nAll functions must be unary.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">pipeAsyncFunctions</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>fns</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">arg</span> <span class=\"token operator\">=></span> fns<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">,</span> f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> <span class=\"token function\">pipeAsyncFunctions</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">async</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 15 (after one second)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><a href=\"http://github.com/30-seconds/\">Acesse a Referência original</a></p>","frontmatter":{"title":"como usar o pipeAsyncFunctions no javascript es6","date":"January 04, 2020","description":""}}},"pageContext":{"slug":"/javascript-como-fazer-pipeAsyncFunctions/","previous":{"fields":{"slug":"/javascript-como-fazer-pluralize/"},"frontmatter":{"title":"como usar o pluralize no javascript es6"}},"next":{"fields":{"slug":"/javascript-como-fazer-pipeFunctions/"},"frontmatter":{"title":"como usar o pipeFunctions no javascript es6"}}}},"staticQueryHashes":["1061827086","63159454"]}